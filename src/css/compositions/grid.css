/* AUTO GRID
Related Every Layout: https://every-layout.dev/layouts/grid/
More info on the flexible nature: https://piccalil.li/tutorial/create-a-responsive-grid-layout-with-no-media-queries-using-css-grid/
A flexible layout that will create an auto-fill grid with
configurable grid item sizes

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-s-m)): This defines the space
between each item.

--grid-min-item-size (14rem): How large each item should be
ideally, as a minimum.

--grid-placement (auto-fill): Set either auto-fit or auto-fill
to change how empty grid tracks are handled */

.grid {
  --min-width: 250px;
	--max-columns: 4;
	--w: max(var(--min-width), calc(100% * (1 / (var(--max-columns) + 1))));

	display: grid;
	gap: var(--gutter, var(--space-s-l));
	grid-template-columns: repeat(auto-fill, minmax(min(var(--w), 100%), 1fr));
}

.grid.max-columns-2 {
  --max-columns: 2;
}

.grid.max-columns-3 {
  --max-columns: 3;
}

.grid.max-columns-4 {
  --max-columns: 4;
}

.grid.max-columns-5 {
  --max-columns: 5;
}

.grid.max-columns-6 {
  --max-columns: 6;
}

.grid.max-columns-7 {
  --max-columns: 7;
}

.grid.max-columns-8 {
  --max-columns: 8;
}

/* A split 50/50 layout */
.grid[data-layout='halves'] {
  --grid-placement: auto-fit;
  --grid-min-item-size: clamp(16rem, 50vw, 33rem);
}

/* Three column grid layout */
.grid[data-layout='thirds'] {
  --grid-placement: auto-fit;
  --grid-min-item-size: clamp(16rem, 33%, 20rem);
}
